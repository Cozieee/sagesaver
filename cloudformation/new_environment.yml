AWSTemplateFormatVersion: "2010-09-09"
Description: >
    Sagemaker-like jupyter environment, but pre-assembled with MongoDB 
    , cost-saving measures like automatic inactivity detection (adjustable),
    and shared EFS repository across all jupyter instances.
Parameters:
    NotebookInstanceTypes:
        Type: String
        Default: r5.large
        AllowedValues:
            - r5.large
            - r5.xlarge
            - r5.2mxlarge
    MongoPassword:
        Type: String
        MinLength": 1,
        MaxLength": 41,
        AllowedPattern": ^[a-zA-Z0-9]*$
    MongoTimeLimit:
        Type: Number
        Default: 30
        MinValue: 10
        MaxValue: 1440
    NotebookName:
        Type: String
    NotebookTimeLimit:
        Type: Number
        Default: 30
        MinValue: 10
        MaxValue: 1440
Mappings:
    AMIMap:
        Notebook:
            Value: ami-0e72330671072a8ba
Resources:
    EnvironmentVPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 172.31.0.0/16
            EnableDnsHostnames: yes
            EnableDnsSupport: yes
            InstanceTenacy: default
            Tags:
                - Key: Name
                  Value: ${AWS::StackName} VPC
                - Key: !Ref AWS::StackName
                  Value: VPC
    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: 172.31.0.0/24
            VpcId: !Ref EnvironmentVPC
            AvailabilityZone: !Select
                - 0
                - Fn::GetAZs: !Ref AWS::Region
            Tags:
                - Key: Name
                  Value: ${AWS::StackName} Public Subnet
                - Key: !Ref AWS::StackName
                  Value: Subnet
    NotebookSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref EnvironmentVPC
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
    MongoSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref EnvironmentVPC
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                - SourceSecurityGroupId: NotebookSecurityGroup
                  IpProtocol: tcp
                  FromPort: 27017
                  ToPort: 27017
    EFSMountSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref EnvironmentVPC
            GroupDescription: Security group for mount target
            SecurityGroupIngress:
                - SourceSecurityGroupId: NotebookSecurityGroup
                  IpProtocol: tcp
                  FromPort: 2049
                  ToPort: 2049
                - SourceSecurityGroupId: MongoSecurityGroup
                  IpProtocol: tcp
                  FromPort: 2049
                  ToPort: 2049
    GeneralIGW:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: ${AWS::StackName} General IGW
    AttachGeneralIGWtoEnvironmentVPC:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref EnvironmentVPC
            InternetGatewayId: !Ref GeneralIGW
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref EnvironmentVPC
            Tags:
                - Key: Name
                  Value: ${AWS::StackName} Public Route Table
    PublicInternalRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref myRouteTable
            GatewayId: !Ref GeneralInernetGateway
            DestinationCidrBlock: 172.31.0.0/16
    PublicIPv4Route:
        Type: AWS::EC2::Route
        DependsOn: AttachGeneralIGWtoEnvironmentVPC
        Properties:
            RouteTableId: !Ref myRouteTable
            GatewayId: !Ref GeneralInernetGateway
            DestinationCidrBlock: 0.0.0.0/0
    PublicIPv6Route:
        Type: AWS::EC2::Route
        DependsOn: AttachGeneralIGWtoEnvironmentVPC
        Properties:
            RouteTableId: !Ref myRouteTable
            GatewayId: !Ref GeneralInernetGateway
            DestinationCidrBlock: ::/0
    NotebookEFS:
        Type: AWS::EFS::FileSystem
        Properties:
            AvailabilityZoneName: !GetAtt PublicSubnet.AvailabilityZone
    NotebookEFSMountTarget:
        Type: AWS::EFS::MountTarget
        Properties:
            FileSystemId: !Ref NotebookEFS
            SubnetId: !Ref PublicSubnet
            SecurityGroups:
                - !GetAtt EnvironmentVPC.EFSMountSecurityGroup
    # IAM Roles